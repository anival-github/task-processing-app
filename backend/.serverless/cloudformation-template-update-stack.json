{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SubmitTaskLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-submitTaskLambda"
      }
    },
    "GetTasksLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-getTasksLambda"
      }
    },
    "StartStateMachineLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-startStateMachineLambda"
      }
    },
    "ProcessTaskLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-processTaskLambda"
      }
    },
    "DlqMonitorLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitorLambda"
      }
    },
    "ConnectLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-connectLambda"
      }
    },
    "DisconnectLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-disconnectLambda"
      }
    },
    "DefaultHandlerLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-defaultHandlerLambda"
      }
    },
    "NotifyClientsLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-notifyClientsLambda"
      }
    },
    "HandleFailureLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-processing-backend-dev-handleFailureLambda"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "task-processing-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TasksTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ConnectionsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TaskQueue",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "TaskDLQ",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": [
                    {
                      "Ref": "TaskProcessingStateMachine"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "TasksTable",
                      "StreamArn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TasksTable",
                        "StreamArn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TaskQueue",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "TaskDLQ",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "task-processing-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SubmitTaskLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/submitTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-submitTaskLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubmitTaskLambdaLogGroup"
      ]
    },
    "GetTasksLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/getTasks.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-getTasksLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTasksLambdaLogGroup"
      ]
    },
    "StartStateMachineLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/startStateMachine.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-startStateMachineLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StartStateMachineLambdaLogGroup"
      ]
    },
    "ProcessTaskLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/processTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-processTaskLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProcessTaskLambdaLogGroup"
      ]
    },
    "DlqMonitorLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/dlqMonitor.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-dlqMonitorLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DlqMonitorLambdaLogGroup"
      ]
    },
    "ConnectLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/websocketConnect.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-connectLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConnectLambdaLogGroup"
      ]
    },
    "DisconnectLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/websocketDisconnect.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-disconnectLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DisconnectLambdaLogGroup"
      ]
    },
    "DefaultHandlerLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/websocketDefault.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-defaultHandlerLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefaultHandlerLambdaLogGroup"
      ]
    },
    "NotifyClientsLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/notifyClients.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-notifyClientsLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NotifyClientsLambdaLogGroup"
      ]
    },
    "HandleFailureLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-processing-backend/dev/1745323697223-2025-04-22T12:08:17.223Z/task-processing-backend.zip"
        },
        "Handler": "src/handlers/handleFailure.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-processing-backend-dev-handleFailureLambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE_NAME": "dev-tasks-table",
            "TASK_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TASK_DLQ_URL": {
              "Ref": "TaskDLQ"
            },
            "STEP_FUNCTIONS_ARN": {
              "Ref": "TaskProcessingStateMachine"
            },
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "MANAGEMENT_API_ENDPOINT": {
              "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
            },
            "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleFailureLambdaLogGroup"
      ]
    },
    "SubmitTaskLambdaLambdaVersionpVKpNMWdS8t9jyBcBq5u1ZC0MMKsmjIB1B78XJR1c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubmitTaskLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "GetTasksLambdaLambdaVersionMKvit0AdUWai0EFiPTKyIQHrhKKE4XZfy31SAiWZctA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTasksLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "StartStateMachineLambdaLambdaVersionb68ibZ9IkRUIyrkDiMgtfHIi75GwNptNi8NJRieSc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartStateMachineLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "ProcessTaskLambdaLambdaVersionHktHE5MpnMQaf2TD0pHorfUgTST4QuM7jM5Rdv6JNJY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessTaskLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "DlqMonitorLambdaLambdaVersionbVm6CMQd7Ag0dFxXGfjejjgeN5FwJYGilysCdvJtnk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DlqMonitorLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "ConnectLambdaLambdaVersionhYCc8mCfGQUI7Nr3asZgFjuY0NdDW2nELXwM6KWGE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConnectLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "DisconnectLambdaLambdaVersionvOAZAqg8JRafGJiS9YCO1NZdz6TAFS9nyD4YPxLkyo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "DefaultHandlerLambdaLambdaVersionFJMJ5XtOSESc7O5XbQlrcWElPyPOC1lOmKutKFGj5UA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefaultHandlerLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "NotifyClientsLambdaLambdaVersionAv9emxvYQRc6hOjmswXICZ8dtoR3xKrxB9XwqkkJJQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotifyClientsLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "HandleFailureLambdaLambdaVersionEZBY84k5xkAXRSDWCavPwQvdGo0p2Zel3U8nYdd3k8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleFailureLambdaLambdaFunction"
        },
        "CodeSha256": "74fx3PnuvVw8IJENbdDqUldDqiAq00nYagE8HC3Lv3I="
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-task-processing-backend-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "ConnectLambdaWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ConnectLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DisconnectLambdaWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DisconnectLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DefaultHandlerLambdaWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DefaultHandlerLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "ConnectLambdaLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "ConnectLambdaLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectLambdaLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DisconnectLambdaLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DefaultHandlerLambdaLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DefaultHandlerLambdaLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefaultHandlerLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectLambdaWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectLambdaWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdefaultWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$default",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DefaultHandlerLambdaWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentnC506RFYep6VB2RqvV05u1ihTL0jLHWmlpcQqTzpg"
        }
      }
    },
    "WebsocketsDeploymentnC506RFYep6VB2RqvV05u1ihTL0jLHWmlpcQqTzpg": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute",
        "SdefaultWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "NotifyClientsLambdaEventSourceMappingDynamodbTasksTable": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "TasksTable",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "NotifyClientsLambdaLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST",
        "FilterCriteria": {
          "Filters": [
            {
              "Pattern": "{\"eventName\":[\"MODIFY\"],\"dynamodb\":{\"NewImage\":{\"status\":{\"S\":[\"Processed\",\"Failed\"]}}}}"
            }
          ]
        }
      }
    },
    "StartStateMachineLambdaEventSourceMappingSQSTaskQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "TaskQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "StartStateMachineLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "DlqMonitorLambdaEventSourceMappingSQSTaskDLQ": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "TaskDLQ",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "DlqMonitorLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-task-processing-backend",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "POST",
            "GET"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "SubmitTaskLambdaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubmitTaskLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSubmitTaskLambda": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SubmitTaskLambdaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTasks": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /tasks",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSubmitTaskLambda"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSubmitTaskLambda"
    },
    "GetTasksLambdaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTasksLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTasksLambda": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTasksLambdaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTasks": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tasks",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTasksLambda"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTasksLambda"
    },
    "TasksTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-tasks-table",
        "AttributeDefinitions": [
          {
            "AttributeName": "taskId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "taskId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    },
    "ConnectionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-websocket-connections",
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "TaskQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "dev-TaskQueue",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "TaskDLQ",
              "Arn"
            ]
          },
          "maxReceiveCount": 3
        }
      }
    },
    "TaskDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "dev-TaskDLQ"
      }
    },
    "TaskProcessingStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": "dev-TaskProcessingStateMachine",
        "DefinitionString": "{\n  \"Comment\": \"Task Processing State Machine\",\n  \"StartAt\": \"ProcessTask\",\n  \"States\": {\n    \"ProcessTask\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda\",\n      \"Parameters\": { \n        \"TaskInput.$\": \"$\", \n        \"RetryCount.$\": \"$$.State.RetryCount\" \n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"IntervalSeconds\": 3,\n          \"MaxAttempts\": 3, \n          \"BackoffRate\": 2.0\n        }\n      ],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"ResultPath\": \"$.errorInfo\", \n          \"Next\": \"HandleFailureState\"\n        }\n      ],\n      \"End\": true\n    },\n    \"HandleFailureState\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda\",\n        \"Parameters\": {\n            \"TaskInput.$\": \"$\",\n            \"ErrorInfo.$\": \"$.errorInfo\"\n        },\n        \"End\": true\n    }\n  }\n}\n",
        "RoleArn": {
          "Fn::GetAtt": [
            "StateMachineExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "StateMachineExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "states.us-east-1.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "StepFunctionsExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": [
                    "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda",
                    "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "TaskProcessingApiGatewayIntegrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayInvokeLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-connectLambda"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-disconnectLambda"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-defaultHandlerLambda"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "SubmitTaskLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubmitTaskLambdaLambdaVersionpVKpNMWdS8t9jyBcBq5u1ZC0MMKsmjIB1B78XJR1c"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-SubmitTaskLambdaLambdaFunctionQualifiedArn"
      }
    },
    "GetTasksLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTasksLambdaLambdaVersionMKvit0AdUWai0EFiPTKyIQHrhKKE4XZfy31SAiWZctA"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-GetTasksLambdaLambdaFunctionQualifiedArn"
      }
    },
    "StartStateMachineLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartStateMachineLambdaLambdaVersionb68ibZ9IkRUIyrkDiMgtfHIi75GwNptNi8NJRieSc"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-StartStateMachineLambdaLambdaFunctionQualifiedArn"
      }
    },
    "ProcessTaskLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessTaskLambdaLambdaVersionHktHE5MpnMQaf2TD0pHorfUgTST4QuM7jM5Rdv6JNJY"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-ProcessTaskLambdaLambdaFunctionQualifiedArn"
      }
    },
    "DlqMonitorLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DlqMonitorLambdaLambdaVersionbVm6CMQd7Ag0dFxXGfjejjgeN5FwJYGilysCdvJtnk"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaLambdaFunctionQualifiedArn"
      }
    },
    "ConnectLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConnectLambdaLambdaVersionhYCc8mCfGQUI7Nr3asZgFjuY0NdDW2nELXwM6KWGE"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-ConnectLambdaLambdaFunctionQualifiedArn"
      }
    },
    "DisconnectLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectLambdaLambdaVersionvOAZAqg8JRafGJiS9YCO1NZdz6TAFS9nyD4YPxLkyo"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-DisconnectLambdaLambdaFunctionQualifiedArn"
      }
    },
    "DefaultHandlerLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefaultHandlerLambdaLambdaVersionFJMJ5XtOSESc7O5XbQlrcWElPyPOC1lOmKutKFGj5UA"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-DefaultHandlerLambdaLambdaFunctionQualifiedArn"
      }
    },
    "NotifyClientsLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotifyClientsLambdaLambdaVersionAv9emxvYQRc6hOjmswXICZ8dtoR3xKrxB9XwqkkJJQ"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-NotifyClientsLambdaLambdaFunctionQualifiedArn"
      }
    },
    "HandleFailureLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleFailureLambdaLambdaVersionEZBY84k5xkAXRSDWCavPwQvdGo0p2Zel3U8nYdd3k8"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-HandleFailureLambdaLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-task-processing-backend-dev-HttpApiUrl"
      }
    }
  }
}