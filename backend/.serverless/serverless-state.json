{
  "service": {
    "service": "task-processing-backend",
    "serviceObject": {
      "name": "task-processing-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "httpApi": {
        "cors": true
      },
      "environment": {
        "TASKS_TABLE_NAME": "dev-tasks-table",
        "TASK_QUEUE_URL": {
          "Ref": "TaskQueue"
        },
        "TASK_DLQ_URL": {
          "Ref": "TaskDLQ"
        },
        "STEP_FUNCTIONS_ARN": {
          "Ref": "TaskProcessingStateMachine"
        },
        "WEBSOCKET_API_ENDPOINT": {
          "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        },
        "MANAGEMENT_API_ENDPOINT": {
          "Fn::Sub": "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        },
        "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConnectionsTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TaskQueue",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TaskDLQ",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:StartExecution"
              ],
              "Resource": [
                {
                  "Ref": "TaskProcessingStateMachine"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:ManageConnections"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketsApi}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:DescribeStream",
                "dynamodb:ListStreams"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              }
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SubmitTaskLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-submitTaskLambda"
            }
          },
          "GetTasksLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-getTasksLambda"
            }
          },
          "StartStateMachineLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-startStateMachineLambda"
            }
          },
          "ProcessTaskLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-processTaskLambda"
            }
          },
          "DlqMonitorLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitorLambda"
            }
          },
          "ConnectLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-connectLambda"
            }
          },
          "DisconnectLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-disconnectLambda"
            }
          },
          "DefaultHandlerLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-defaultHandlerLambda"
            }
          },
          "NotifyClientsLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-notifyClientsLambda"
            }
          },
          "HandleFailureLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-handleFailureLambda"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-processing-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][5]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:DescribeStream",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "StreamArn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TaskQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "TaskDLQ",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-processing-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SubmitTaskLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/submitTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-submitTaskLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitTaskLambdaLogGroup"
            ]
          },
          "GetTasksLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/getTasks.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-getTasksLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTasksLambdaLogGroup"
            ]
          },
          "StartStateMachineLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/startStateMachine.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-startStateMachineLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StartStateMachineLambdaLogGroup"
            ]
          },
          "ProcessTaskLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/processTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-processTaskLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessTaskLambdaLogGroup"
            ]
          },
          "DlqMonitorLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/dlqMonitor.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-dlqMonitorLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DlqMonitorLambdaLogGroup"
            ]
          },
          "ConnectLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/websocketConnect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-connectLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectLambdaLogGroup"
            ]
          },
          "DisconnectLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/websocketDisconnect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-disconnectLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectLambdaLogGroup"
            ]
          },
          "DefaultHandlerLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/websocketDefault.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-defaultHandlerLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DefaultHandlerLambdaLogGroup"
            ]
          },
          "NotifyClientsLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/notifyClients.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-notifyClientsLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyClientsLambdaLogGroup"
            ]
          },
          "HandleFailureLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z/task-processing-backend.zip"
              },
              "Handler": "src/handlers/handleFailure.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-processing-backend-dev-handleFailureLambda",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE_NAME": "dev-tasks-table",
                  "TASK_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_QUEUE_URL\"]"
                  },
                  "TASK_DLQ_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASK_DLQ_URL\"]"
                  },
                  "STEP_FUNCTIONS_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"STEP_FUNCTIONS_ARN\"]"
                  },
                  "WEBSOCKET_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_API_ENDPOINT\"]"
                  },
                  "MANAGEMENT_API_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"MANAGEMENT_API_ENDPOINT\"]"
                  },
                  "CONNECTIONS_TABLE_NAME": "dev-websocket-connections"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleFailureLambdaLogGroup"
            ]
          },
          "SubmitTaskLambdaLambdaVersionNKtJV7YFIr5u4etNslPhO5EW7B9aW4WgahmBoGnEA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitTaskLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "GetTasksLambdaLambdaVersion3KeNAppK0nU0bDOjzFORm5sq0tETZzBtrgqKqCr9E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTasksLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "StartStateMachineLambdaLambdaVersion4sYRQifzhxM5GoUlvSSu4jDwWhvLS0bgFIG07bZiO5g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartStateMachineLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "ProcessTaskLambdaLambdaVersionrDWBYvWrd8rsfcyriBykO0Q5VB2Q6q4nqe8P1XY9i9c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessTaskLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "DlqMonitorLambdaLambdaVersionj4rivjRAAbgdQPl6mNI94PHekPFmpBnVw4gPEeE0Ug8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DlqMonitorLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "ConnectLambdaLambdaVersionFkEOFrwAkGTfhcAlq1nwmSg49EOzLY2XI5xAN0VgHA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "DisconnectLambdaLambdaVersionyjBZh7aAGjsNMPQtWRDCOQvceO2kY3rUJskz8CJOXw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "DefaultHandlerLambdaLambdaVersionbOTiB9kPHhxodvT6ActtMFtKI3c8yAm1dmY7SRcCYc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultHandlerLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "NotifyClientsLambdaLambdaVersionDZSXi2wxC7XXCfDXRrTgYbBCOh7wwmVtv0FRI7v3U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyClientsLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "HandleFailureLambdaLambdaVersionGcFyVhiZwoIVL2qS94DVnruQdFnvrOtTrsYfnIBs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleFailureLambdaLambdaFunction"
              },
              "CodeSha256": "lkoyhZeh82ixAKE2kCRXa2UxVSvGfECp3K4B8vGruks="
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-task-processing-backend-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectLambdaWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectLambdaLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectLambdaWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectLambdaLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DefaultHandlerLambdaWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultHandlerLambdaLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectLambdaLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectLambdaLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectLambdaLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectLambdaLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DefaultHandlerLambdaLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DefaultHandlerLambdaLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultHandlerLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectLambdaWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectLambdaWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DefaultHandlerLambdaWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentnC506RFYep6VB2RqvV05u1ihTL0jLHWmlpcQqTzpg"
              }
            }
          },
          "WebsocketsDeploymentnC506RFYep6VB2RqvV05u1ihTL0jLHWmlpcQqTzpg": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "NotifyClientsLambdaEventSourceMappingDynamodbTasksTable": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "Enabled": true,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotifyClientsLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "LATEST",
              "FilterCriteria": {
                "Filters": [
                  {
                    "Pattern": "{\"eventName\":[\"MODIFY\"],\"dynamodb\":{\"NewImage\":{\"status\":{\"S\":[\"Processed\",\"Failed\"]}}}}"
                  }
                ]
              }
            }
          },
          "StartStateMachineLambdaEventSourceMappingSQSTaskQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TaskQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "StartStateMachineLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "DlqMonitorLambdaEventSourceMappingSQSTaskDLQ": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TaskDLQ",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "DlqMonitorLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-task-processing-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "SubmitTaskLambdaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitTaskLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSubmitTaskLambda": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SubmitTaskLambdaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSubmitTaskLambda"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSubmitTaskLambda"
          },
          "GetTasksLambdaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTasksLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTasksLambda": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTasksLambdaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTasksLambda"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTasksLambda"
          },
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-tasks-table",
              "AttributeDefinitions": [
                {
                  "AttributeName": "taskId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "taskId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_IMAGE"
              }
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-websocket-connections",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TaskQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "dev-TaskQueue",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "TaskDLQ",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              }
            }
          },
          "TaskDLQ": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "dev-TaskDLQ"
            }
          },
          "TaskProcessingStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "StateMachineName": "dev-TaskProcessingStateMachine",
              "DefinitionString": "{\n  \"Comment\": \"Task Processing State Machine\",\n  \"StartAt\": \"ProcessTask\",\n  \"States\": {\n    \"ProcessTask\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"IntervalSeconds\": 3,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2.0\n        }\n      ],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"ResultPath\": \"$.errorInfo\",\n          \"Next\": \"HandleFailureState\"\n        }\n      ],\n      \"End\": true\n    },\n    \"HandleFailureState\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda\",\n        \"Parameters\": {\n            \"TaskInput.$\": \"$\",\n            \"ErrorInfo.$\": \"$.errorInfo\"\n        },\n        \"End\": true\n    }\n  }\n}\n",
              "RoleArn": {
                "Fn::GetAtt": [
                  "StateMachineExecutionRole",
                  "Arn"
                ]
              }
            }
          },
          "StateMachineExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "states.us-east-1.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "StepFunctionsExecutionPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": "lambda:InvokeFunction",
                        "Resource": [
                          "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda",
                          "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "TaskProcessingApiGatewayIntegrationRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "ApiGatewayInvokeLambdaPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": "lambda:InvokeFunction",
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-connectLambda"
                          },
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-disconnectLambda"
                          },
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-defaultHandlerLambda"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "SubmitTaskLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitTaskLambdaLambdaVersionNKtJV7YFIr5u4etNslPhO5EW7B9aW4WgahmBoGnEA"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-SubmitTaskLambdaLambdaFunctionQualifiedArn"
            }
          },
          "GetTasksLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTasksLambdaLambdaVersion3KeNAppK0nU0bDOjzFORm5sq0tETZzBtrgqKqCr9E"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-GetTasksLambdaLambdaFunctionQualifiedArn"
            }
          },
          "StartStateMachineLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartStateMachineLambdaLambdaVersion4sYRQifzhxM5GoUlvSSu4jDwWhvLS0bgFIG07bZiO5g"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-StartStateMachineLambdaLambdaFunctionQualifiedArn"
            }
          },
          "ProcessTaskLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessTaskLambdaLambdaVersionrDWBYvWrd8rsfcyriBykO0Q5VB2Q6q4nqe8P1XY9i9c"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ProcessTaskLambdaLambdaFunctionQualifiedArn"
            }
          },
          "DlqMonitorLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DlqMonitorLambdaLambdaVersionj4rivjRAAbgdQPl6mNI94PHekPFmpBnVw4gPEeE0Ug8"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaLambdaFunctionQualifiedArn"
            }
          },
          "ConnectLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectLambdaLambdaVersionFkEOFrwAkGTfhcAlq1nwmSg49EOzLY2XI5xAN0VgHA"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ConnectLambdaLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectLambdaLambdaVersionyjBZh7aAGjsNMPQtWRDCOQvceO2kY3rUJskz8CJOXw"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-DisconnectLambdaLambdaFunctionQualifiedArn"
            }
          },
          "DefaultHandlerLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultHandlerLambdaLambdaVersionbOTiB9kPHhxodvT6ActtMFtKI3c8yAm1dmY7SRcCYc"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-DefaultHandlerLambdaLambdaFunctionQualifiedArn"
            }
          },
          "NotifyClientsLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyClientsLambdaLambdaVersionDZSXi2wxC7XXCfDXRrTgYbBCOh7wwmVtv0FRI7v3U"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-NotifyClientsLambdaLambdaFunctionQualifiedArn"
            }
          },
          "HandleFailureLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleFailureLambdaLambdaVersionGcFyVhiZwoIVL2qS94DVnruQdFnvrOtTrsYfnIBs"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HandleFailureLambdaLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "tasksTableName": "dev-tasks-table",
      "connectionsTableName": "dev-websocket-connections",
      "processTaskLambdaArn": "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda",
      "handleFailureLambdaArn": "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda"
    },
    "pluginsData": {},
    "functions": {
      "submitTaskLambda": {
        "handler": "src/handlers/submitTask.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/tasks"
          }
        ],
        "name": "task-processing-backend-dev-submitTaskLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SubmitTaskLambdaLambdaVersionNKtJV7YFIr5u4etNslPhO5EW7B9aW4WgahmBoGnEA"
      },
      "getTasksLambda": {
        "handler": "src/handlers/getTasks.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/tasks"
          }
        ],
        "name": "task-processing-backend-dev-getTasksLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTasksLambdaLambdaVersion3KeNAppK0nU0bDOjzFORm5sq0tETZzBtrgqKqCr9E"
      },
      "startStateMachineLambda": {
        "handler": "src/handlers/startStateMachine.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][10][\"Resource\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "task-processing-backend-dev-startStateMachineLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "StartStateMachineLambdaLambdaVersion4sYRQifzhxM5GoUlvSSu4jDwWhvLS0bgFIG07bZiO5g"
      },
      "processTaskLambda": {
        "handler": "src/handlers/processTask.handler",
        "events": [],
        "name": "task-processing-backend-dev-processTaskLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ProcessTaskLambdaLambdaVersionrDWBYvWrd8rsfcyriBykO0Q5VB2Q6q4nqe8P1XY9i9c"
      },
      "dlqMonitorLambda": {
        "handler": "src/handlers/dlqMonitor.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][10][\"Resource\"][1]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "task-processing-backend-dev-dlqMonitorLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DlqMonitorLambdaLambdaVersionj4rivjRAAbgdQPl6mNI94PHekPFmpBnVw4gPEeE0Ug8"
      },
      "connectLambda": {
        "handler": "src/handlers/websocketConnect.handler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "task-processing-backend-dev-connectLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConnectLambdaLambdaVersionFkEOFrwAkGTfhcAlq1nwmSg49EOzLY2XI5xAN0VgHA"
      },
      "disconnectLambda": {
        "handler": "src/handlers/websocketDisconnect.handler",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "task-processing-backend-dev-disconnectLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DisconnectLambdaLambdaVersionyjBZh7aAGjsNMPQtWRDCOQvceO2kY3rUJskz8CJOXw"
      },
      "defaultHandlerLambda": {
        "handler": "src/handlers/websocketDefault.handler",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "task-processing-backend-dev-defaultHandlerLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DefaultHandlerLambdaLambdaVersionbOTiB9kPHhxodvT6ActtMFtKI3c8yAm1dmY7SRcCYc"
      },
      "notifyClientsLambda": {
        "handler": "src/handlers/notifyClients.handler",
        "events": [
          {
            "stream": {
              "type": "dynamodb",
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][9][\"Resource\"][0]"
              },
              "batchSize": 1,
              "startingPosition": "LATEST",
              "filterPatterns": [
                {
                  "eventName": [
                    "MODIFY"
                  ],
                  "dynamodb": {
                    "NewImage": {
                      "status": {
                        "S": [
                          "Processed",
                          "Failed"
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "name": "task-processing-backend-dev-notifyClientsLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "NotifyClientsLambdaLambdaVersionDZSXi2wxC7XXCfDXRrTgYbBCOh7wwmVtv0FRI7v3U"
      },
      "handleFailureLambda": {
        "handler": "src/handlers/handleFailure.handler",
        "events": [],
        "name": "task-processing-backend-dev-handleFailureLambda",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "HandleFailureLambdaLambdaVersionGcFyVhiZwoIVL2qS94DVnruQdFnvrOtTrsYfnIBs"
      }
    },
    "resources": {
      "Resources": {
        "TasksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-tasks-table",
            "AttributeDefinitions": [
              {
                "AttributeName": "taskId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "taskId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "StreamSpecification": {
              "StreamViewType": "NEW_IMAGE"
            }
          }
        },
        "ConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-websocket-connections",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TaskQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "dev-TaskQueue",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "TaskDLQ",
                  "Arn"
                ]
              },
              "maxReceiveCount": 3
            }
          }
        },
        "TaskDLQ": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "dev-TaskDLQ"
          }
        },
        "TaskProcessingStateMachine": {
          "Type": "AWS::StepFunctions::StateMachine",
          "Properties": {
            "StateMachineName": "dev-TaskProcessingStateMachine",
            "DefinitionString": "{\n  \"Comment\": \"Task Processing State Machine\",\n  \"StartAt\": \"ProcessTask\",\n  \"States\": {\n    \"ProcessTask\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"IntervalSeconds\": 3,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2.0\n        }\n      ],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"ResultPath\": \"$.errorInfo\",\n          \"Next\": \"HandleFailureState\"\n        }\n      ],\n      \"End\": true\n    },\n    \"HandleFailureState\": {\n        \"Type\": \"Task\",\n        \"Resource\": \"arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda\",\n        \"Parameters\": {\n            \"TaskInput.$\": \"$\",\n            \"ErrorInfo.$\": \"$.errorInfo\"\n        },\n        \"End\": true\n    }\n  }\n}\n",
            "RoleArn": {
              "Fn::GetAtt": [
                "StateMachineExecutionRole",
                "Arn"
              ]
            }
          }
        },
        "StateMachineExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "states.us-east-1.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "StepFunctionsExecutionPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "lambda:InvokeFunction",
                      "Resource": [
                        "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-processTaskLambda",
                        "arn:aws:lambda:us-east-1:445567083659:function:task-processing-backend-dev-handleFailureLambda"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "TaskProcessingApiGatewayIntegrationRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "apigateway.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "ApiGatewayInvokeLambdaPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "lambda:InvokeFunction",
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-connectLambda"
                        },
                        {
                          "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-disconnectLambda"
                        },
                        {
                          "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:task-processing-backend-dev-defaultHandlerLambda"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "task-processing-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "O:\\test-app\\backend\\.serverless\\task-processing-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/task-processing-backend/dev/1745320419936-2025-04-22T11:13:39.936Z",
    "artifact": "task-processing-backend.zip"
  }
}